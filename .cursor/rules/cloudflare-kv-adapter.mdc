---
description: Cloudflare KV adapter contract, keying rules, and TTL semantics
globs: src/**/*.ts,tests/**/*.ts
---

# Cloudflare KV Adapter Details

- Public API

    - `cloudflareKvCacheAdapter<Value>(config)` in [src/index.ts](mdc:src/index.ts) returns a `Cache<Value>` for `@epic-web/cachified`
    - `config`: `{ kv: KVNamespace; keyPrefix?: string; name?: string }`

- Operations

    - Get: [src/get.ts](mdc:src/get.ts)
        - Reads with `kv.getWithMetadata(cacheKey, { type: "text" })`
        - Parses JSON, returns `{ value, metadata } | null`
    - Set: [src/set.ts](mdc:src/set.ts)
        - Computes TTL using `totalTtl(metadata)` from `@epic-web/cachified`
        - If `Infinity` â†’ no expiration (`expirationTtl: undefined`)
        - Else rounds up to seconds and enforces a minimum of 60s
        - Stores JSON string plus metadata via `kv.put`
    - Delete: [src/delete.ts](mdc:src/delete.ts) deletes the computed cache key

- Keying

    - `buildCacheKey(givenKey, keyPrefix?)` in [src/utils.ts](mdc:src/utils.ts)
        - If `keyPrefix` is truthy, uses `"${keyPrefix}:${givenKey}"`, otherwise `givenKey`

- Worker usage pattern

    - Create the adapter once per request and inject into `env` (see [tests/worker.ts](mdc:tests/worker.ts))
    - When passing `waitUntil`, bind the context (e.g., `ctx.waitUntil.bind(ctx)`)

- Testing considerations
    - Use fake timers to validate TTL/SWR transitions and revalidation behavior (see [tests/adapter.test.ts](mdc:tests/adapter.test.ts))
    - For prefixed keys, assert against `buildCacheKey(key, prefix)`
